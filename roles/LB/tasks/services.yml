---

- include_vars: roles/LB/vars/backends.yaml
- include_vars: roles/LB/vars/root_pass.yml

- name: Sudo install
  package: pkg=sudo state=installed

- name: Send sudo config Ubuntu
  copy: 
   src: roles/LB/files/sudoers_deb_distr 
   dest: /etc/sudoers
   owner: root
   group: root
   mode: 0644

- name: Install SSH daemon
  package: pkg=openssh-server state=installed
 #   ignore_errors: yes
  become: true 

- name: Iptables config deploy
  copy: src=iptables/iptables.rules dest=/etc/iptables.rules
  notify: Iptables reload

- name: Password auth switch off
  lineinfile: 
    path: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    insertafter: '^#PasswordAuthentication'
    line: 'PasswordAuthentication yes' ## YES is 4 the tests only! Production config must be set to NO.
    state: present
    create: true

- name: Root login switch off
  lineinfile: 
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    insertafter: '^#PermitRootLogin'
    line: 'PermitRootLogin prohibit-password' ## Disable root login by password auth
    state: present
    create: true

- name: Starting SSH service on Ubuntu servers
  service: name=ssh state=started
  become: true

- name: Install fail2ban daemon
  package: pkg=fail2ban state=installed
  become: true

- name: Send the fail2ban config
  copy: 
   src: roles/LB/files/jail.conf_distr 
   dest: /etc/fail2ban/jail.conf
   owner: root
   group: root
   mode: 0644
  notify: 
  - fail2ban reload

- name: fail2ban starting check
  service: name=fail2ban state=started

- name: NRPE agent install
  package: pkg={{ item }} state=installed 
  with_items:
    - nagios-nrpe-server
    - nagios-plugins

- name: NRPE agent Allow server
  lineinfile: 
    path: /etc/nagios/nrpe.cfg 
    regexp: '^allowed_hosts'
    insertafter: '^#allowed_hosts'
    line: 'allowed_hosts=127.0.0.1, {{ item.ip }}'
    state: present
    create: true
  with_items: '{{ nagios_master }}'
  notify:
    - Nagios NRPE agent restart

- name: HaProxy install
  package: pkg=haproxy state=installed

- name: 'Create directory for custom frontend'
  file:
    path: "/etc/haproxy/backends.d"
    state: directory

- name: 'Build up the backetnd'
  template:
    src: "backend.cfg"
    dest: "/etc/haproxy/backends.d/{{ item.name }}.cfg"
  with_items: "{{ haproxy_backends }}"
  when: haproxy_backends is defined

- name: Haproxy default config deploy
  copy: src=haproxy.cfg dest=/etc/haproxy/backends.d/haproxy.cfg_dist

- name: 'Build Main Configuration file'
  assemble:
    src: "/etc/haproxy/backends.d"
    dest: "/etc/haproxy/haproxy.cfg"
    backup: yes
    validate: "haproxy -c -f %s"
  notify: haproxy reload

- name: Additional App install
  package: pkg={{ item }} state=installed 
  with_items:
    - ca-certificates
    - vim
    - wget
    - curl
    - git
    - rsync
